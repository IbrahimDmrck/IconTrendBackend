// <auto-generated />
using System;
using DataAccess.Concrete.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(IconTrendContext))]
    [Migration("20230112055818_generalinformation_table")]
    partial class generalinformation_table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Entities.Concrete.AnnounceImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnnounceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AnnounceImages");
                });

            modelBuilder.Entity("Entities.Concrete.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnnounceContent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("AnnounceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("AnnounceStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AnnounceTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Entities.Concrete.BankAccountInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BankCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Branch")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("BankAccountInfos");
                });

            modelBuilder.Entity("Entities.Concrete.Congress", b =>
                {
                    b.Property<int>("CongressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CongressAbout")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CongressAdress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CongressDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CongressName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CongressPresidentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("CongressStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RegulatoryBoard")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ScienceBoard")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Topic")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Univercity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CongressId");

                    b.ToTable("Congresses");
                });

            modelBuilder.Entity("Entities.Concrete.CongressImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CongressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("CongressImages");
                });

            modelBuilder.Entity("Entities.Concrete.CongressPresident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CongressId")
                        .HasColumnType("int");

                    b.Property<string>("CongressPresidentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("CongressPresidents");
                });

            modelBuilder.Entity("Entities.Concrete.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Message")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NameSurname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Entities.Concrete.GeneralInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PaperEvaluation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Rules")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SummaryContent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("GeneralInformations");
                });

            modelBuilder.Entity("Entities.Concrete.Kongre", b =>
                {
                    b.Property<int>("KongreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BilimKurulu")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("KongreAdi")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("KongreAdresi")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("KongreBaskani")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("KongreBitisTarihi")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("KongreDuzenlemeKurulu")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("KongreHakkinda")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("KongreKonusu")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("KongreTarihi")
                        .HasColumnType("datetime(6)");

                    b.HasKey("KongreId");

                    b.ToTable("Kongres");
                });

            modelBuilder.Entity("Entities.Concrete.KongreImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("KongreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("KongreImages");
                });

            modelBuilder.Entity("Entities.Concrete.RegulatoryBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CongressId")
                        .HasColumnType("int");

                    b.Property<string>("RegulatoryBoardMemberName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Univercity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("RegulatoryBoards");
                });

            modelBuilder.Entity("Entities.Concrete.Save", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OralPresentationMemberPrice")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OralPresentationNonMemberPrice")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ParticipationPriceServiceAdditionDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VideoConferenceDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VideoConferenceMemberPrice")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VideoConferenceNonMemberPrice")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Saves");
                });

            modelBuilder.Entity("Entities.Concrete.ScienceBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CongressId")
                        .HasColumnType("int");

                    b.Property<string>("ScienceBoardMemberName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Univercity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ScienceBoards");
                });

            modelBuilder.Entity("Entities.Concrete.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CongressId")
                        .HasColumnType("int");

                    b.Property<string>("TopicName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Entities.Concrete.TrBankAccountInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Iban")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("TrBankAccountInfos");
                });

            modelBuilder.Entity("Entities.Concrete.TransportLayover", b =>
                {
                    b.Property<int>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MinDemand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("TransportId");

                    b.ToTable("TransportLayovers");
                });

            modelBuilder.Entity("Entities.Concrete.TransportLayoverImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TransportLayoverId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TransportLayoverImages");
                });
#pragma warning restore 612, 618
        }
    }
}
